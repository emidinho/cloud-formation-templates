AWSTemplateFormatVersion: 2010-09-09
Description: create vpc and all the required network resoures such as
             vpc, 2 public subnets, 2 private subnets, public route table, 
             private route table, NACLS & SG, Internet gateway, Nat gateway(with EIP) and ec2 WebServer.
             (dont forget to delete later on)

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - vpcCIDRblock

      - 
        Label: 
          default: "Subnet CIDRs"
        Parameters: 
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

      - 
        Label: 
          default: "SSH & HTTP CIDRs for NACL & SG"
        Parameters: 
          - IpSourceNACLsinboundSSH
          - IpSourceNACLsinboundHTTP
          - IpSourceSGSSH
          - IpSourceSGHTTP

Parameters:
  PublicSubnet1AZ:
    Description: list of existing Availability Zones in this region
    Type: AWS::EC2::AvailabilityZone::Name
  PublicSubnet2AZ:
    Description: list of existing Availability Zones in this region
    Type: AWS::EC2::AvailabilityZone::Name
  PrivateSubnet1AZ:
    Description: list of existing Availability Zones in this region
    Type: AWS::EC2::AvailabilityZone::Name
  PrivateSubnet2AZ:  
    Description: list of existing Availability Zones in this region
    Type: AWS::EC2::AvailabilityZone::Name
  
  SecurityGroupPortSSH:
    Description: Simple Description of a Number Parameter
    Type: Number
  IpSourceSGSSH:
    Description: IP address range allowed by SG to SSH into the EC2 instances
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  SecurityGroupPortHTTP:
    Description: Simple Description of a Number Parameter
    Type: Number
  IpSourceSGHTTP:
    Description: IP address range allowed by SG to pass via HTTP  into the EC2 instances
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  InstanceType:
      Description: WebServer EC2 instance type
      Type: String
      Default: t2.micro
      AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      ConstraintDescription: must be a valid EC2 instance type.

  AMIID:
    Description: The EC2 AMI id found in ssm parameter store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    ConstraintDescription: Must be a valid AMI based on the region

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  VolumeSize:
    Description: EBS Volume size
    Type: Number
    Default: 8
    MinValue: 8
    MaxValue: 100
    ConstraintDescription: must be a number between 8 to 100 Gb        

  vpcCIDRblock:
    Description: CIDR range for the created custom VPC
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet1CIDR:
    Description: CIDR range for the created custom PublicSubnet1
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 10.0.0.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet2CIDR:
    Description: CIDR range for the created custom PublicSubnet2
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 10.0.1.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet1CIDR:
    Description: CIDR range for the created custom PrivateSubnet1
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 10.0.2.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet2CIDR:
    Description: CIDR range for the created custom PrivateSubnet2
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 10.0.3.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  IpSourceNACLsinboundSSH:
    Description: CIDR range to be allowed by NACL for SSH
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.  
  IpSourceNACLsinboundHTTP:
    Description: CIDR range to be allowed by NACL for HTTP
    Type: String
    MinLength: '5'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources: 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
        Ref: vpcCIDRblock
      EnableDnsHostnames: "true"
      EnableDnsSupport: "true"
      
  PracticeIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Practice-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: VPC
      InternetGatewayId: 
        Ref: PracticeIGW
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      ConnectivityType: private
      SubnetId: 
        Ref: PublicSubnet2

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: PublicSubnet1AZ
      CidrBlock: 
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      VpcId: 
        Ref: VPC  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: PublicSubnet2AZ
      CidrBlock: 
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      VpcId: 
        Ref: VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
  PublicRouteTableAssocSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable  
  PublicRouteTableAssocSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PublicRoutes:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
        Ref: PracticeIGW
      RouteTableId: 
        Ref: PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: PrivateSubnet1AZ
      CidrBlock: 
        Ref: PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      VpcId: 
        Ref: VPC 
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Ref: PrivateSubnet2AZ
      CidrBlock: 
        Ref: PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      VpcId: 
        Ref: VPC    
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
  PrivateRouteTableAssocSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: PrivateSubnet1
      RouteTableId: 
        Ref: PrivateRouteTable
  PrivateRouteTableAssocSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: PrivateSubnet2
      RouteTableId: 
        Ref: PrivateRouteTable
  PrivateRoutes:
    Type: AWS::EC2::Route
    Properties: 
      DependOn: NatGateway
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway
      RouteTableId: 
        Ref: PrivateRouteTable

  NACLs:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: 
        Ref: VPC
  NAClsInboundSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      RuleAction: allow
      CidrBlock: 
        Ref: IpSourceNACLsinboundSSH
      Protocol: 6
      PortRange: 
        From: 22
        To: 22
      Egress: false
      NetworkAclId: 
        Ref: NACLs
      RuleNumber: 99
  NAClsOutboundSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Protocol: -1
      Egress: true
      NetworkAclId: 
        Ref: NACLs
      RuleNumber: 99  
  NAClsInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      RuleAction: allow
      CidrBlock: 
        Ref: IpSourceNACLsinboundHTTP
      Protocol: 6
      PortRange: 
        From: 80
        To: 80
      Egress: false
      NetworkAclId: 
        Ref: NACLs
      RuleNumber: 100
  NAClsOutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Protocol: -1
      Egress: true
      NetworkAclId: 
        Ref: NACLs
      RuleNumber: 100
  InstanceSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebInstance-sg
      GroupDescription: allows http and ssh to instance
      VpcId:
        Ref: VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 
            Ref: SecurityGroupPortSSH
          ToPort: 
            Ref: SecurityGroupPortSSH
          CidrIp: 
            Ref: IpSourceSGSSH
        - IpProtocol: tcp
          FromPort: 
            Ref: SecurityGroupPortHTTP
          ToPort: 
            Ref: SecurityGroupPortHTTP
          CidrIp: 
            Ref: IpSourceSGHTTP  

  myEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName: 
        Ref: KeyName
      ImageId: 
        Ref: AMIID
      InstanceType: 
        Ref: InstanceType
      BlockDeviceMappings:
      -
       DeviceName: /dev/xvda
       Ebs:
        VolumeType: gp2
        DeleteOnTermination: true
        VolumeSize: 
          Ref: VolumeSize
      SecurityGroupIds:
        - Ref: InstanceSecGroup
      SubnetId: 
        Ref: PublicSubnet1
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          sudo su
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          wget -P ../../var/www/html https://s3.amazonaws.com/emidinho.net/index.html
      Tags:
        - Key: Name
          Value: emidinho-WebInstance
        - Key: CreatedBy
          Value: emidinho 

Outputs:
  WebsiteURL:
    Description: URL for newly created myEC2Instance
    Value: 
      Fn::Join: 
        - ''
        - - 'http://'
          - 
            Fn::GetAtt: 
              - myEC2Instance
              - PublicDnsName    
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: 
      Fn::GetAtt: 
        - myEC2Instance
        - PublicIp
