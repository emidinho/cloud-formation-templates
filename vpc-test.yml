AWSTemplateFormatVersion: 2010-09-09
Description: testing to findout if subnet cidrs will conflicts

Resources: 
  myvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
        Ref: 10.0.0.0/16
      EnableDnsHostnames: "true"
      EnableDnsSupport: "true"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: 
        Ref: myvpc  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: 
        Ref: myvpc

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      VpcId: 
        Ref: myvpc 
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      VpcId: 
        Ref: myvpc       

Outputs:
  myvpc:
    Description: Get VPC-ID
    Export: 
      Name: Fn::sub ${AWS-StackName}-myvpc
    Value: 
      Ref: myvpc 

  PublicSubnet1:
    Description: Get PublicSubnet1-ID
    Export: 
      Name: Fn::sub ${AWS-StackName}-PublicSubnet1
    Value: 
      Ref: PublicSubnet1

  PublicSubnet2:
    Description: Get PublicSubnet2-ID
    Export: 
      Name: Fn::sub ${AWS-StackName}-PublicSubnet2
    Value: 
      Ref: PublicSubnet2    

  PrivateSubnet1:
    Description: Get PrivateSubnet1-ID
    Export: 
      Name: Fn::sub ${AWS-StackName}-PrivateSubnet1
    Value: 
      Ref: PrivateSubnet1      

  PrivateSubnet2:
    Description: Get PrivateSubnet2-ID
    Export: 
      Name: Fn::sub ${AWS-StackName}-PrivateSubnet2
    Value: 
      Ref: PrivateSubnet2     
      